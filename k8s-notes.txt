
kubectl get pods	查看当前命名空间下的所有 Pod
kubectl get svc	查看所有 Service
kubectl describe pod <pod-name>	查看某个 Pod 的详细信息
kubectl logs <pod-name>	查看 Pod 的日志
kubectl apply -f <file>.yaml	根据 YAML 文件创建或更新资源
kubectl delete pod <pod-name>	删除指定 Pod
kubectl exec -it <pod-name> -- /bin/bash	进入 Pod 的容器终端
kubectl config view	查看当前的 kubeconfig 配置
kubectl get nodes	查看集群中的节点信息



after install k8s in docker-desktop, you can test it by below, if you see docker-desktop node is 'Ready', means: it's normal
    kubectl version --client --short
    kubectl cluster-info
    kubectl get nodes



don't suggest use: kubectl apply -f k8s/
because, k8s will use order of file names, so manage them by yourself:
    kubectl apply -f k8s/mongo.yaml
    
    kubectl apply -f k8s/secret.yaml
    kubectl apply -f k8s/backend.yaml

    kubectl apply -f k8s/pv-pvc.yaml
    kubectl apply -f k8s/frontend.yaml
    kubectl apply -f k8s/nginx.yaml

http://localhost:30080


check pod is successful:
    kubectl get pods
    kubectl get svc
    kubectl logs deployment/backend




kubectl delete -f k8s/nginx.yaml -n default (or : kubectl delete -f k8s/nginx.yaml)

kubectl get all --all-namespaces


kubectl apply -f k8s/nginx.yaml -n default





# Nginx ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  default.conf: |
    server {
        listen 80;
        server_name localhost;

        root /usr/share/nginx/html/browser;
        index index.html index.htm;

        location / {
            try_files $uri $uri/ /index.html;
        }

        location /api/ {
            proxy_pass http://backend:5000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
    }

---
# Nginx Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: william20220828/reservation-platform-nginx:latest
          ports:
            - containerPort: 80
          volumeMounts:
            - name: nginx-config-volume
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: default.conf
      volumes:
        - name: nginx-config-volume
          configMap:
            name: nginx-config

---
# Nginx Service
apiVersion: v1
kind: Service
metadata:
  name: nginx
spec:
  type: NodePort
  selector:
    app: nginx
  ports:
    - port: 80
      targetPort: 80
      nodePort: 30080